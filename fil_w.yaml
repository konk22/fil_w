esphome:
  name: fil-w-v2
  friendly_name: fil_w_v2

esp32:
  board: esp32dev
  framework:
    type: arduino

# Enable logging
logger:
  level: WARN
# Enable Home Assistant API
api:
  encryption:
    key: "  "

ota:
  password: "  "

wifi:
  ssid: !secret wifi_ssid
  password: !secret wifi_password

  # Enable fallback hotspot (captive portal) in case wifi connection fails
  ap:
    ssid: "Fil-W-V2 Fallback Hotspot"
    password: "Password"

captive_portal:

i2c:
  sda: 21
  scl: 22
  frequency: 800000

font:
  - file: "fonts/arialmt.ttf"
    id: font53
    size: 53
    glyphs: |-
      !"%()+=,-_.>?:°0123456789АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧЩЬЫЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ абвгдеёжзийклмнопрстуфхцчшщьыъэюяabcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ
  - file: "fonts/arialmt.ttf"
    id: font18
    size: 18
    glyphs: |-
      !"%()+=,-_.>?:°0123456789АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧЩЬЫЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ абвгдеёжзийклмнопрстуфхцчшщьыъэюяabcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ
  - file: "fonts/arialmt.ttf"
    id: font14
    size: 14
    glyphs: |-
      !"%()+=,-_.>?:°0123456789АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧЩЬЫЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ абвгдеёжзийклмнопрстуфхцчшщьыъэюяabcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ
  - file: "fonts/arialmt.ttf"
    id: font16
    size: 16
    glyphs: |-
      !"%()+=,-_.>?:°0123456789АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧЩЬЫЪЭЮЯABCDEFGHIJKLMNOPQRSTUVWXYZ абвгдеёжзийклмнопрстуфхцчшщьыъэюяabcdefghijklmnopqrstuvwxyz'éèàòùç/&ôœìïöñ

globals:
  - id: processed_flag
    type: bool
    restore_value: no
    initial_value: "false"

  - id: filament_list_split2
    type: float
    restore_value: no
    initial_value: "0"

  - id: ref_tare_zero
    type: float
    restore_value: no
    initial_value: "0"

  - id: ref_tare_1kg
    type: float
    restore_value: no
    initial_value: "0"

  - id: last_weight_val
    type: float
    restore_value: no
    initial_value: "0"

  - id: profile_bool
    type: bool
    restore_value: no
    initial_value: "false"

  - id: prog_print
    type: bool
    restore_value: no
    initial_value: "false"

interval:
  - interval: 12s
    then:
      if: 
        condition:
          lambda: return id(state_print).state == "printing";
        then:
          - lambda: id(prog_print) = true;
          - delay: 2s
          - lambda: id(prog_print) = false;
        else:
          - lambda: id(prog_print) = false;
  - interval: 5min
    then:
      if: 
        condition:
          display.is_displaying_page: main_page
        then:
          display.page.show: !lambda return id(main_page);

sensor:
  - platform: hx711
    name: "internal hx711"
    dout_pin: 33
    clk_pin: 23
    gain: 128
    update_interval: 0.2s 
    internal: true  
    filters:
      - filter_out: 8388607
      - median:
          window_size: 3
          send_every: 2
          send_first_at: 2
      - exponential_moving_average:
          alpha: 0.5
          send_every: 1
          send_first_at: 1
    id: fil_w_raw

  - platform: template
    name: "internal plastic"
    update_interval: 0.1s
    lambda: |-
      float x = (id(fil_w_raw).state - id(tare_zero).state) / (id(tare_1kg).state - id(tare_zero).state) * id(ref_tare_kg).state;
      return x;
    filters:
      - exponential_moving_average:
          alpha: 0.9
          send_every: 2
          send_first_at: 1
      - delta: 1.5 
    internal: true   
    id: fil_w_f

  - platform: template
    name: "internal raw calibrate"
    update_interval: 0.1s
    lambda: return id(fil_w_raw_calib).state = id(fil_w_raw).state;
    internal: true   
    id: fil_w_raw_calib

  - platform: template
    name: "Plastic"
    unit_of_measurement: г
    update_interval: 3s
    lambda: |-
      return id(filament_weight).state = id(fil_w_f).state - id(weight_coil).state;  
    id: filament_weight
    
  - platform: template
    name: "HX711"
    update_interval: 3s
    lambda: |-
      return id(hx711_weight).state = id(fil_w_raw).state;   
    id: hx711_weight

  - platform: homeassistant
    id: progress_print
    entity_id: sensor.uni3d_progress    # задать имя объекта прогресса печати из HA

  - platform: rotary_encoder
    pin_a:
      number: 19        # поменять местами с pin_b для инвертирования энкодера
      inverted: false
      mode:
        input: true
        #pullup: true
    pin_b:
      number: 18        # поменять местами с pin_a для инвертирования энкодера
      inverted: false
      mode:
        input: true
        #pullup: true
    resolution: 1       # разрешение энкодера 1, 2, 4
    restore_mode: ALWAYS_ZERO
    on_clockwise:
      then:
        - script.execute: script_on_clockwise
    on_anticlockwise:
      then:
        - script.execute: script_on_anticlockwise
    id: my_rotary_encoder

binary_sensor:
  - platform: gpio
    id: enc_button
    pin:
      number: 26
      inverted: false
      mode:
        input: true
        #pullup: true
    on_press:
        - if:
            condition:
              and:
                - lambda: return id(processed_flag) == false;
                - display.is_displaying_page: profile_page
            then:
              - display.page.show: !lambda return id(main_page);
              - lambda: |-
                  id(menu_val_enc).state = 0;
                  id(colibrate_val_enc).state = 0;
                  id(processed_flag) = true;

        - if:
            condition:
              and:
                - display.is_displaying_page: confirm_page
                - lambda: return id(menu_val_enc).state == 42;
                - lambda: return id(processed_flag) == false;
            then:
              - display.page.show: !lambda return id(main_page);
              - lambda: |-
                  id(menu_val_enc).state = 0;
                  id(colibrate_val_enc).state = 0;
                  auto call1 = id(tare_zero).make_call();
                  call1.set_value(id(ref_tare_zero));
                  call1.perform();
                  auto call2 = id(tare_1kg).make_call();
                  call2.set_value(id(ref_tare_1kg));
                  call2.perform();
                  id(menu_val_enc).state = 0;
                  id(colibrate_val_enc).state = 0;
                  id(processed_flag) = true;
        - if:
            condition:
              and:
                - display.is_displaying_page: confirm_page
                - lambda: return id(menu_val_enc).state == 28;
                - lambda: return id(processed_flag) == false;
            then:
                - display.page.show: !lambda return id(main_page);
                - lambda: id(processed_flag) = true;

        - if:
            condition:
              and:
                - display.is_displaying_page: fine_tuning_1kg
                - lambda: return id(processed_flag) == false;
            then:
              - display.page.show: !lambda return id(confirm_page);
              - lambda: id(processed_flag) = true;

        - if:
            condition:
              and:
                - display.is_displaying_page: fine_tuning_zero
                - lambda: return id(processed_flag) == false;
            then:
              - lambda: id(ref_tare_1kg) = id(tare_1kg).state;
              - display.page.show: !lambda return id(fine_tuning_1kg);
              - lambda: id(processed_flag) = true;

        - if:
            condition:
              and:
                - display.is_displaying_page: main_page
                - lambda: return id(processed_flag) == false;
            then:
              - display.page.show: !lambda return id(menu_page);
              - lambda: id(processed_flag) = true;
        - if:
            condition:
              and:
                - lambda: return id(processed_flag) == false;
                - lambda: return id(menu_val_enc).state == 42;
            then:
              - display.page.show: !lambda return id(main_page);
              - lambda: |-
                  id(menu_val_enc).state = 0;
                  id(colibrate_val_enc).state = 0;
                  id(processed_flag) = true;

        - if:
            condition:
              and:
                - display.is_displaying_page: menu_page
                - lambda: return id(menu_val_enc).state == 0;
                - lambda: return id(processed_flag) == false;
            then:
              - display.page.show: !lambda return id(profile_page);
              - lambda: |-
                  id(menu_val_enc).state = 0;
                  id(processed_flag) = true;

        - if:
            condition:
              and:
                - display.is_displaying_page: menu_page
                - lambda: return id(menu_val_enc).state == 28;
                - lambda: return id(processed_flag) == false;
            then:
              - lambda: id(ref_tare_zero) = id(tare_zero).state;
              - display.page.show: !lambda return id(fine_tuning_zero);
              - lambda: id(processed_flag) = true;

        - if:
            condition:
              and:
                - display.is_displaying_page: menu_page
                - lambda: return id(menu_val_enc).state == 14;
                - lambda: return id(processed_flag) == false;
            then:
              - display.page.show: !lambda return id(tare_page);
              - lambda: |-
                  id(menu_val_enc).state = 14;
                  id(processed_flag) = true;
        - if:
            condition:
              and:
                - display.is_displaying_page: tare_page
                - lambda: return id(menu_val_enc).state == 14;
                - lambda: return id(processed_flag) == false;
            then:
              - lambda: |-
                  auto call = id(tare_zero).make_call();
                  call.set_value((int(id(fil_w_raw_calib).state / 10.0)) * 10.0);
                  call.perform();
                  id(processed_flag) = true;
        - if:
            condition:
              and:
                - display.is_displaying_page: tare_page
                - lambda: return id(menu_val_enc).state == 28;
                - lambda: return id(processed_flag) == false;
            then:
              - display.page.show: !lambda return id(ref_tare_page);
              - lambda: |-
                  id(processed_flag) = true;
        - if:
            condition:
              and:
                - display.is_displaying_page: ref_tare_page
                - lambda: return id(processed_flag) == false;
            then:
              - display.page.show: !lambda return id(tare_page);
              - lambda: |-
                  auto call = id(tare_1kg).make_call();
                  call.set_value((int(id(fil_w_raw_calib).state / 10.0)) * 10.0);
                  call.perform();
                  id(processed_flag) = true;
        - lambda: id(processed_flag) = false;

script:
  - id: script_on_clockwise
    then:
      - if:
          condition:
            - display.is_displaying_page: main_page
          then:
            - number.increment: weight_coil
      - if:
          condition:
            or:
              - display.is_displaying_page: menu_page
              - display.is_displaying_page: tare_page
              - display.is_displaying_page: confirm_page
          then:
            number.increment: menu_val_enc
      - if:
          condition:
            - display.is_displaying_page: profile_page
          then:
            - homeassistant.service:
                service: input_select.select_next
                data:
                  entity_id: input_select.tipy_fillamenta
      - if:
          condition:
            - display.is_displaying_page: fine_tuning_zero
          then:
            - number.increment: tare_zero
      - if:
          condition:
            - display.is_displaying_page: fine_tuning_1kg
          then:
            - number.increment: tare_1kg
      - if:
          condition:
            - display.is_displaying_page: ref_tare_page
          then:
            - number.increment: ref_tare_kg

  - id: script_on_anticlockwise
    then:
      - if:
          condition:
            - display.is_displaying_page: main_page
          then:
            number.decrement: weight_coil
      - if:
          condition:
            or:
              - display.is_displaying_page: menu_page
              - display.is_displaying_page: tare_page
              - display.is_displaying_page: confirm_page
          then:
            number.decrement: menu_val_enc
      - if:
          condition:
            - display.is_displaying_page: profile_page
          then:
            - homeassistant.service:
                service: input_select.select_previous
                data:
                  entity_id: input_select.tipy_fillamenta
      - if:
          condition:
            - display.is_displaying_page: fine_tuning_zero
          then:
            - number.decrement: tare_zero
      - if:
          condition:
            - display.is_displaying_page: fine_tuning_1kg
          then:
            - number.decrement: tare_1kg
      - if:
          condition:
            - display.is_displaying_page: ref_tare_page
          then:
            - number.decrement: ref_tare_kg

  - id: change_prof
    then:
      - homeassistant.service:
          service: input_select.select_first
          data:
            entity_id: input_select.tipy_fillamenta
      - lambda: id(filament_list_split2) = id(weight_coil).state;

  - id: chek_profile
    then:
      - lambda: |-
          id(profile_bool) = true;
          std::string str = id(filament_list).state;
          std::string firstPart;
          std::string secondPart;
          char * token;
          char seps[] = "/";
          token = strtok(&str[0], seps);
          if (token != NULL) {
            firstPart = token;
            token = strtok(NULL, seps);
            if (token != NULL) {
              secondPart = token;
              float secondPartAsFloat = std::stof(secondPart);
              id(filament_list_split2) = secondPartAsFloat;
              auto call = id(weight_coil).make_call();
              call.set_value(id(filament_list_split2));
              call.perform();
              }
          }
          else {
            firstPart = "Load...";
          }
          id(profile_bool) = false;
          id(filament_list_split1).state = firstPart.c_str();
      - if:
          condition:
            - lambda: return id(filament_list_split1).state == "Load...";
          then:
            - delay: 1s
            - display.page.show: !lambda return id(main_page);

text_sensor:
  - platform: homeassistant
    disabled_by_default: true
    id: state_print
    entity_id: sensor.uni3d_current_print_state   # задать имя объекта статуса принтера из HA

  - platform: template
    disabled_by_default: true
    id: filament_list_split1

  - platform: homeassistant
    id: filament_list
    entity_id: input_select.tipy_fillamenta     # задать имя объекта списка типов филамента
    disabled_by_default: true
    on_value:
      then:
        - script.execute: chek_profile           

number:
  - platform: template
    name: "Weight roll"
    optimistic: true
    restore_value: true
    min_value: 0
    max_value: 500
    step: 10
    unit_of_measurement: г
    on_value:
      then:
        - if:
            condition:
              and:
                - lambda: return id(last_weight_val) != id(weight_coil).state;
                - lambda: return id(profile_bool) == false;
            then:
              script.execute: change_prof
        - lambda: id(last_weight_val) = id(weight_coil).state;
    id: weight_coil

  - platform: template
    name: "Referent weight"
    optimistic: true
    restore_value: true
    min_value: 0
    max_value: 5000
    step: 10
    id: ref_tare_kg

  - platform: template
    name: "Tare 0"
    optimistic: true
    restore_value: true
    min_value: 0
    max_value: 2000000
    step: 10
    id: tare_zero

  - platform: template
    name: "Tare load"
    optimistic: true
    restore_value: true
    min_value: 0
    max_value: 2000000
    step: 10
    id: tare_1kg

  - platform: template
    optimistic: true
    min_value: 0
    max_value: 42
    step: 14
    id: menu_val_enc

  - platform: template
    optimistic: true
    min_value: 14
    max_value: 42
    step: 14
    id: colibrate_val_enc

display:
  - platform: ssd1306_i2c
    model: "SSD1306 128x64"
    address: 0x3C
    update_interval: 0.2s
    pages:
      - id: main_page
        lambda: |-
          if (id(prog_print) == false) {
            float x = id(fil_w_f).state - id(weight_coil).state;
            it.printf(0, 0, id(font16), "%.0f %s", id(weight_coil).state, id(filament_list_split1).state.c_str());
            it.printf(0, 24, id(font53), "%.0f", x);
          }
          else if (id(prog_print) == true){
            float x = id(fil_w_f).state - id(weight_coil).state;
            it.printf(0, 0, id(font16), "%.0f %s", id(weight_coil).state, id(filament_list_split1).state.c_str());
            it.printf(0, 24, id(font53), "%.0f%s", id(progress_print).state, "%");
          }
      - id: menu_page
        lambda: |-
          it.printf(0, id(menu_val_enc).state, id(font18), ">");
          it.printf(15, 0, id(font18), "Профили");
          it.printf(15, 14, id(font18), "Тарирование");
          it.printf(15, 28, id(font18), "Калибровка");  
          it.printf(15, 42, id(font18), "Выход");
      - id: profile_page
        lambda: |-
          it.printf(0, 0, id(font18), id(filament_list_split1).state.c_str());
          it.printf(0, 42, id(font18), "%.0f", id(filament_list_split2));
      - id: tare_page
        lambda: |-
          if (id(menu_val_enc).state == 0){id(menu_val_enc).state = 14;}     
          it.printf(it.get_width(), 0, id(font18), TextAlign::TOP_RIGHT, "%.0f", id(fil_w_f).state);     
          it.printf(0, id(menu_val_enc).state, id(font18), ">");
          it.printf(10, 0, id(font18), "%.0f", id(fil_w_raw_calib).state);
          it.printf(10, 14, id(font18), "%.0f - 0кг", id(tare_zero).state);
          it.printf(10, 28, id(font18), "%.0f - %.1fкг", id(tare_1kg).state, (id(ref_tare_kg).state / 1000.0));
          it.printf(10, 42, id(font18), "Выход");
      - id: ref_tare_page
        lambda: |-
          it.printf(20, 14, id(font18), "%.0f", id(ref_tare_kg).state);
          it.printf(0, 28, id(font18), "Введите");
          it.printf(0, 42, id(font18), "вес в граммах");
      - id: fine_tuning_zero
        lambda: |-
          it.printf(it.get_width(), 0, id(font18), TextAlign::TOP_RIGHT, "%.0f", id(fil_w_f).state);
          it.printf(10, 0, id(font18), "%.0f", id(ref_tare_zero));
          it.printf(10, 18, id(font18), "%.0f", id(tare_zero).state);
          it.printf(85, 18, id(font18), "- 0кг");
          it.printf(0, 34, id(font14), "Увеличить");
          it.printf(0, 48, id(font14), "для снижения веса");
      - id: fine_tuning_1kg
        lambda: |-
          it.printf(it.get_width(), 0, id(font18), TextAlign::TOP_RIGHT, "%.0f", id(fil_w_f).state);
          it.printf(10, 0, id(font18), "%.0f", id(ref_tare_1kg));
          it.printf(10, 18, id(font18), "%.0f", id(tare_1kg).state);
          it.printf(85, 18, id(font18), "- 1кг");
          it.printf(0, 34, id(font14), "Увеличить");
          it.printf(0, 48, id(font14), "для снижения веса");
      - id: confirm_page
        lambda: |-
          if (id(menu_val_enc).state == 0 || id(menu_val_enc).state == 14){id(menu_val_enc).state = 28;}     
          it.printf(it.get_width(), 0, id(font18), TextAlign::TOP_RIGHT, "%.0f", id(fil_w_f).state);     
          it.printf(0, id(menu_val_enc).state, id(font18), ">");
          it.printf(10, 14, id(font18), "Сохранить?");
          it.printf(10, 28, id(font18), "Да");
          it.printf(10, 42, id(font18), "Нет");
